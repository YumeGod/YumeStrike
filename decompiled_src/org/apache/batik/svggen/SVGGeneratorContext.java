package org.apache.batik.svggen;

import java.awt.Color;
import java.awt.Composite;
import java.awt.Font;
import java.awt.Paint;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Locale;
import org.w3c.dom.Document;

public class SVGGeneratorContext implements ErrorConstants {
   Document domFactory;
   ImageHandler imageHandler;
   GenericImageHandler genericImageHandler;
   ExtensionHandler extensionHandler;
   SVGIDGenerator idGenerator;
   StyleHandler styleHandler;
   String generatorComment;
   ErrorHandler errorHandler;
   boolean svgFont = false;
   GraphicContextDefaults gcDefaults;
   int precision = 4;
   protected DecimalFormat decimalFormat;
   protected static DecimalFormatSymbols dsf;
   protected static DecimalFormat[] decimalFormats;

   protected SVGGeneratorContext(Document var1) {
      this.decimalFormat = decimalFormats[this.precision];
      this.setDOMFactory(var1);
   }

   public static SVGGeneratorContext createDefault(Document var0) {
      SVGGeneratorContext var1 = new SVGGeneratorContext(var0);
      var1.setIDGenerator(new SVGIDGenerator());
      var1.setExtensionHandler(new DefaultExtensionHandler());
      var1.setImageHandler(new ImageHandlerBase64Encoder());
      var1.setStyleHandler(new DefaultStyleHandler());
      var1.setComment("Generated by the Batik Graphics2D SVG Generator");
      var1.setErrorHandler(new DefaultErrorHandler());
      return var1;
   }

   public final GraphicContextDefaults getGraphicContextDefaults() {
      return this.gcDefaults;
   }

   public final void setGraphicContextDefaults(GraphicContextDefaults var1) {
      this.gcDefaults = var1;
   }

   public final SVGIDGenerator getIDGenerator() {
      return this.idGenerator;
   }

   public final void setIDGenerator(SVGIDGenerator var1) {
      if (var1 == null) {
         throw new SVGGraphics2DRuntimeException("idGenerator should not be null");
      } else {
         this.idGenerator = var1;
      }
   }

   public final Document getDOMFactory() {
      return this.domFactory;
   }

   public final void setDOMFactory(Document var1) {
      if (var1 == null) {
         throw new SVGGraphics2DRuntimeException("domFactory should not be null");
      } else {
         this.domFactory = var1;
      }
   }

   public final ExtensionHandler getExtensionHandler() {
      return this.extensionHandler;
   }

   public final void setExtensionHandler(ExtensionHandler var1) {
      if (var1 == null) {
         throw new SVGGraphics2DRuntimeException("extensionHandler should not be null");
      } else {
         this.extensionHandler = var1;
      }
   }

   public final ImageHandler getImageHandler() {
      return this.imageHandler;
   }

   public final void setImageHandler(ImageHandler var1) {
      if (var1 == null) {
         throw new SVGGraphics2DRuntimeException("imageHandler should not be null");
      } else {
         this.imageHandler = var1;
         this.genericImageHandler = new SimpleImageHandler(var1);
      }
   }

   public final void setGenericImageHandler(GenericImageHandler var1) {
      if (var1 == null) {
         throw new SVGGraphics2DRuntimeException("imageHandler should not be null");
      } else {
         this.imageHandler = null;
         this.genericImageHandler = var1;
      }
   }

   public final StyleHandler getStyleHandler() {
      return this.styleHandler;
   }

   public final void setStyleHandler(StyleHandler var1) {
      if (var1 == null) {
         throw new SVGGraphics2DRuntimeException("styleHandler should not be null");
      } else {
         this.styleHandler = var1;
      }
   }

   public final String getComment() {
      return this.generatorComment;
   }

   public final void setComment(String var1) {
      this.generatorComment = var1;
   }

   public final ErrorHandler getErrorHandler() {
      return this.errorHandler;
   }

   public final void setErrorHandler(ErrorHandler var1) {
      if (var1 == null) {
         throw new SVGGraphics2DRuntimeException("errorHandler should not be null");
      } else {
         this.errorHandler = var1;
      }
   }

   public final boolean isEmbeddedFontsOn() {
      return this.svgFont;
   }

   public final void setEmbeddedFontsOn(boolean var1) {
      this.svgFont = var1;
   }

   public final int getPrecision() {
      return this.precision;
   }

   public final void setPrecision(int var1) {
      if (var1 < 0) {
         this.precision = 0;
      } else if (var1 > 12) {
         this.precision = 12;
      } else {
         this.precision = var1;
      }

      this.decimalFormat = decimalFormats[this.precision];
   }

   public final String doubleString(double var1) {
      double var3 = Math.abs(var1);
      return !(var3 >= 1.0E8) && (double)((int)var1) != var1 ? this.decimalFormat.format(var1) : Integer.toString((int)var1);
   }

   static {
      dsf = new DecimalFormatSymbols(Locale.US);
      decimalFormats = new DecimalFormat[13];
      decimalFormats[0] = new DecimalFormat("#", dsf);
      String var0 = "#.";

      for(int var1 = 1; var1 < decimalFormats.length; ++var1) {
         var0 = var0 + "#";
         decimalFormats[var1] = new DecimalFormat(var0, dsf);
      }

   }

   public static class GraphicContextDefaults {
      protected Paint paint;
      protected Stroke stroke;
      protected Composite composite;
      protected Shape clip;
      protected RenderingHints hints;
      protected Font font;
      protected Color background;

      public void setStroke(Stroke var1) {
         this.stroke = var1;
      }

      public Stroke getStroke() {
         return this.stroke;
      }

      public void setComposite(Composite var1) {
         this.composite = var1;
      }

      public Composite getComposite() {
         return this.composite;
      }

      public void setClip(Shape var1) {
         this.clip = var1;
      }

      public Shape getClip() {
         return this.clip;
      }

      public void setRenderingHints(RenderingHints var1) {
         this.hints = var1;
      }

      public RenderingHints getRenderingHints() {
         return this.hints;
      }

      public void setFont(Font var1) {
         this.font = var1;
      }

      public Font getFont() {
         return this.font;
      }

      public void setBackground(Color var1) {
         this.background = var1;
      }

      public Color getBackground() {
         return this.background;
      }

      public void setPaint(Paint var1) {
         this.paint = var1;
      }

      public Paint getPaint() {
         return this.paint;
      }
   }
}

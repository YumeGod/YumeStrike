package org.apache.fop.fo;

import java.util.HashMap;
import java.util.Map;
import org.apache.fop.apps.FOUserAgent;
import org.apache.fop.fo.expr.PropertyException;
import org.apache.fop.fo.flow.table.TableFObj;
import org.apache.fop.fo.properties.BackgroundPositionShorthand;
import org.apache.fop.fo.properties.BorderSpacingShorthandParser;
import org.apache.fop.fo.properties.BorderWidthPropertyMaker;
import org.apache.fop.fo.properties.BoxPropShorthandParser;
import org.apache.fop.fo.properties.CharacterProperty;
import org.apache.fop.fo.properties.ColorProperty;
import org.apache.fop.fo.properties.CondLengthProperty;
import org.apache.fop.fo.properties.CorrespondingPropertyMaker;
import org.apache.fop.fo.properties.DimensionPropertyMaker;
import org.apache.fop.fo.properties.EnumProperty;
import org.apache.fop.fo.properties.FontFamilyProperty;
import org.apache.fop.fo.properties.FontShorthandParser;
import org.apache.fop.fo.properties.FontShorthandProperty;
import org.apache.fop.fo.properties.FontSizePropertyMaker;
import org.apache.fop.fo.properties.FontStretchPropertyMaker;
import org.apache.fop.fo.properties.FontWeightPropertyMaker;
import org.apache.fop.fo.properties.GenericShorthandParser;
import org.apache.fop.fo.properties.IndentPropertyMaker;
import org.apache.fop.fo.properties.KeepProperty;
import org.apache.fop.fo.properties.LengthPairProperty;
import org.apache.fop.fo.properties.LengthProperty;
import org.apache.fop.fo.properties.LengthRangeProperty;
import org.apache.fop.fo.properties.LineHeightPropertyMaker;
import org.apache.fop.fo.properties.ListProperty;
import org.apache.fop.fo.properties.NumberProperty;
import org.apache.fop.fo.properties.PageBreakShorthandParser;
import org.apache.fop.fo.properties.PageDimensionMaker;
import org.apache.fop.fo.properties.PositionShorthandParser;
import org.apache.fop.fo.properties.Property;
import org.apache.fop.fo.properties.PropertyMaker;
import org.apache.fop.fo.properties.ReferenceOrientationMaker;
import org.apache.fop.fo.properties.SpaceProperty;
import org.apache.fop.fo.properties.SpacePropertyMaker;
import org.apache.fop.fo.properties.SpacingPropertyMaker;
import org.apache.fop.fo.properties.StringProperty;
import org.apache.fop.fo.properties.TableBorderPrecedence;
import org.apache.fop.fo.properties.TextDecorationProperty;
import org.apache.fop.fo.properties.ToBeImplementedProperty;
import org.apache.fop.fo.properties.VerticalAlignShorthandParser;
import org.apache.fop.fo.properties.WhiteSpaceShorthandParser;
import org.apache.fop.fo.properties.XMLLangShorthandParser;

public final class FOPropertyMapping implements Constants {
   private static Map s_htPropNames = new HashMap();
   private static Map s_htSubPropNames = new HashMap();
   private static Map s_htPropIds = new HashMap();
   private static PropertyMaker[] s_generics = null;
   private Property[] enums = null;
   private PropertyMaker genericColor = null;
   private PropertyMaker genericBoolean = null;
   private PropertyMaker genericKeep = null;
   private PropertyMaker genericCondLength = null;
   private PropertyMaker genericCondPadding = null;
   private PropertyMaker genericPadding = null;
   private PropertyMaker genericCondBorderWidth = null;
   private PropertyMaker genericBorderWidth = null;
   private PropertyMaker genericBorderStyle = null;
   private PropertyMaker genericBreak = null;
   private PropertyMaker genericSpace = null;

   private void createGenerics() {
      this.genericColor = new ColorProperty.Maker(0);
      this.genericBoolean = new EnumProperty.Maker(0);
      this.genericBoolean.addEnum("true", this.getEnumProperty(149, "TRUE"));
      this.genericBoolean.addEnum("false", this.getEnumProperty(48, "FALSE"));
      this.genericKeep = new KeepProperty.Maker(0);
      PropertyMaker sub = new NumberProperty.Maker(5632);
      sub.setByShorthand(true);
      sub.setDefault("auto");
      sub.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      sub.addEnum("always", this.getEnumProperty(7, "ALWAYS"));
      this.genericKeep.addSubpropMaker(sub);
      sub = new NumberProperty.Maker(5120);
      sub.setByShorthand(true);
      sub.setDefault("auto");
      sub.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      sub.addEnum("always", this.getEnumProperty(7, "ALWAYS"));
      this.genericKeep.addSubpropMaker(sub);
      sub = new NumberProperty.Maker(4608);
      sub.setByShorthand(true);
      sub.setDefault("auto");
      sub.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      sub.addEnum("always", this.getEnumProperty(7, "ALWAYS"));
      this.genericKeep.addSubpropMaker(sub);
      this.genericCondLength = new CondLengthProperty.Maker(0);
      PropertyMaker sub = new LengthProperty.Maker(2048);
      sub.setByShorthand(true);
      this.genericCondLength.addSubpropMaker(sub);
      PropertyMaker sub = new EnumProperty.Maker(1024);
      sub.addEnum("discard", this.getEnumProperty(32, "DISCARD"));
      sub.addEnum("retain", this.getEnumProperty(118, "RETAIN"));
      this.genericCondLength.addSubpropMaker(sub);
      this.genericCondPadding = new CondLengthProperty.Maker(0);
      this.genericCondPadding.useGeneric(this.genericCondLength);
      this.genericCondPadding.setInherited(false);
      this.genericCondPadding.getSubpropMaker(2048).setDefault("0pt");
      this.genericCondPadding.setPercentBase(5);
      this.genericPadding = new LengthProperty.Maker(0);
      this.genericPadding.setInherited(false);
      this.genericPadding.setDefault("0pt");
      this.genericPadding.setPercentBase(5);
      this.genericPadding.addShorthand(s_generics[170]);
      this.genericCondBorderWidth = new CondLengthProperty.Maker(0);
      this.genericCondBorderWidth.setInherited(false);
      this.genericCondBorderWidth.addKeyword("thin", "0.5pt");
      this.genericCondBorderWidth.addKeyword("medium", "1pt");
      this.genericCondBorderWidth.addKeyword("thick", "2pt");
      sub = new LengthProperty.Maker(2048);
      sub.setByShorthand(true);
      sub.addKeyword("thin", "0.5pt");
      sub.addKeyword("medium", "1pt");
      sub.addKeyword("thick", "2pt");
      sub.setDefault("medium");
      this.genericCondBorderWidth.addSubpropMaker(sub);
      sub = new EnumProperty.Maker(1024);
      sub.addEnum("discard", this.getEnumProperty(32, "DISCARD"));
      sub.addEnum("retain", this.getEnumProperty(118, "RETAIN"));
      this.genericCondBorderWidth.addSubpropMaker(sub);
      this.genericBorderWidth = new LengthProperty.Maker(0);
      this.genericBorderWidth.setInherited(false);
      this.genericBorderWidth.addKeyword("thin", "0.5pt");
      this.genericBorderWidth.addKeyword("medium", "1pt");
      this.genericBorderWidth.addKeyword("thick", "2pt");
      this.genericBorderWidth.setDefault("medium");
      this.genericBorderStyle = new EnumProperty.Maker(0);
      this.genericBorderStyle.setInherited(false);
      this.genericBorderStyle.addEnum("none", this.getEnumProperty(95, "NONE"));
      this.genericBorderStyle.addEnum("hidden", this.getEnumProperty(57, "HIDDEN"));
      this.genericBorderStyle.addEnum("dotted", this.getEnumProperty(36, "DOTTED"));
      this.genericBorderStyle.addEnum("dashed", this.getEnumProperty(31, "DASHED"));
      this.genericBorderStyle.addEnum("solid", this.getEnumProperty(133, "SOLID"));
      this.genericBorderStyle.addEnum("double", this.getEnumProperty(37, "DOUBLE"));
      this.genericBorderStyle.addEnum("groove", this.getEnumProperty(55, "GROOVE"));
      this.genericBorderStyle.addEnum("ridge", this.getEnumProperty(119, "RIDGE"));
      this.genericBorderStyle.addEnum("inset", this.getEnumProperty(67, "INSET"));
      this.genericBorderStyle.addEnum("outset", this.getEnumProperty(101, "OUTSET"));
      this.genericBorderStyle.setDefault("none");
      this.genericBreak = new EnumProperty.Maker(0);
      this.genericBreak.setInherited(false);
      this.genericBreak.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      this.genericBreak.addEnum("column", this.getEnumProperty(28, "COLUMN"));
      this.genericBreak.addEnum("page", this.getEnumProperty(104, "PAGE"));
      this.genericBreak.addEnum("even-page", this.getEnumProperty(44, "EVEN_PAGE"));
      this.genericBreak.addEnum("odd-page", this.getEnumProperty(100, "ODD_PAGE"));
      this.genericBreak.setDefault("auto");
      this.genericSpace = new SpaceProperty.Maker(0);
      this.genericSpace.setInherited(false);
      sub = new LengthProperty.Maker(3072);
      sub.setDefault("0pt");
      sub.setByShorthand(true);
      this.genericSpace.addSubpropMaker(sub);
      sub = new LengthProperty.Maker(3584);
      sub.setDefault("0pt");
      sub.setByShorthand(true);
      this.genericSpace.addSubpropMaker(sub);
      sub = new LengthProperty.Maker(2560);
      sub.setDefault("0pt");
      sub.setByShorthand(true);
      this.genericSpace.addSubpropMaker(sub);
      sub = new NumberProperty.Maker(4096);
      sub.addEnum("force", this.getEnumProperty(53, "FORCE"));
      sub.setDefault("0");
      this.genericSpace.addSubpropMaker(sub);
      sub = new EnumProperty.Maker(1024);
      sub.addEnum("discard", this.getEnumProperty(32, "DISCARD"));
      sub.addEnum("retain", this.getEnumProperty(118, "RETAIN"));
      sub.setDefault("discard");
      this.genericSpace.addSubpropMaker(sub);
   }

   private static void addPropertyMaker(String name, PropertyMaker maker) {
      s_generics[maker.getPropId()] = maker;
      s_htPropNames.put(name, new Integer(maker.getPropId()));
      s_htPropIds.put(new Integer(maker.getPropId()), name);
   }

   private static void addSubpropMakerName(String name, int id) {
      s_htSubPropNames.put(name, new Integer(id));
      s_htPropIds.put(new Integer(id), name);
   }

   private Property getEnumProperty(int enumValue, String text) {
      if (this.enums == null) {
         this.enums = new Property[201];
      }

      if (this.enums[enumValue] == null) {
         this.enums[enumValue] = EnumProperty.getInstance(enumValue, text);
      }

      return this.enums[enumValue];
   }

   public static PropertyMaker[] getGenericMappings() {
      if (s_generics == null) {
         s_generics = new PropertyMaker[276];
         FOPropertyMapping gp = new FOPropertyMapping();
         gp.createShorthandProperties();
         gp.createGenerics();
         gp.createAccessibilityProperties();
         gp.createAbsolutePositionProperties();
         gp.createAuralProperties();
         gp.createBorderPaddingBackgroundProperties();
         gp.createFontProperties();
         gp.createHyphenationProperties();
         gp.createMarginBlockProperties();
         gp.createMarginInlineProperties();
         gp.createRelativePosProperties();
         gp.createAreaAlignmentProperties();
         gp.createAreaDimensionProperties();
         gp.createBlockAndLineProperties();
         gp.createCharacterProperties();
         gp.createColorProperties();
         gp.createFloatProperties();
         gp.createKeepsAndBreaksProperties();
         gp.createLayoutProperties();
         gp.createLeaderAndRuleProperties();
         gp.createDynamicProperties();
         gp.createMarkersProperties();
         gp.createNumberToStringProperties();
         gp.createPaginationAndLayoutProperties();
         gp.createTableProperties();
         gp.createWritingModeProperties();
         gp.createMiscProperties();
         addSubpropMakerName("length", 2048);
         addSubpropMakerName("conditionality", 1024);
         addSubpropMakerName("block-progression-direction", 512);
         addSubpropMakerName("inline-progression-direction", 1536);
         addSubpropMakerName("within-line", 5120);
         addSubpropMakerName("within-column", 4608);
         addSubpropMakerName("within-page", 5632);
         addSubpropMakerName("minimum", 3072);
         addSubpropMakerName("maximum", 2560);
         addSubpropMakerName("optimum", 3584);
         addSubpropMakerName("precedence", 4096);
      }

      return s_generics;
   }

   public static int getPropertyId(String name) {
      if (name != null) {
         Integer i = (Integer)s_htPropNames.get(name);
         if (i != null) {
            return i;
         }
      }

      return -1;
   }

   public static int getSubPropertyId(String name) {
      if (name != null) {
         Integer i = (Integer)s_htSubPropNames.get(name);
         if (i != null) {
            return i;
         }
      }

      return -1;
   }

   public static String getPropertyName(int id) {
      return (id & -512) != 0 && (id & 511) != 0 ? s_htPropIds.get(new Integer(id & 511)) + "." + s_htPropIds.get(new Integer(id & -512)) : (String)s_htPropIds.get(new Integer(id));
   }

   private void createAccessibilityProperties() {
      PropertyMaker m = new StringProperty.Maker(221);
      m.setInherited(false);
      m.setDefault("none");
      addPropertyMaker("source-document", m);
      m = new StringProperty.Maker(212);
      m.setInherited(false);
      m.setDefault("none");
      addPropertyMaker("role", m);
   }

   private void createAbsolutePositionProperties() {
      PropertyMaker m = new EnumProperty.Maker(1);
      m.setInherited(false);
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.addEnum("fixed", this.getEnumProperty(51, "FIXED"));
      m.addEnum("absolute", this.getEnumProperty(1, "ABSOLUTE"));
      m.setDefault("auto");
      m.addShorthand(s_generics[193]);
      addPropertyMaker("absolute-position", m);
      LengthProperty.Maker l = new LengthProperty.Maker(253);
      l.setInherited(false);
      l.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      l.setDefault("auto");
      l.setPercentBase(6);
      addPropertyMaker("top", l);
      l = new LengthProperty.Maker(211);
      l.setInherited(false);
      l.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      l.setDefault("auto");
      l.setPercentBase(5);
      addPropertyMaker("right", l);
      l = new LengthProperty.Maker(57);
      l.setInherited(false);
      l.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      l.setDefault("auto");
      l.setPercentBase(6);
      addPropertyMaker("bottom", l);
      l = new LengthProperty.Maker(140);
      l.setInherited(false);
      l.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      l.setDefault("auto");
      l.setPercentBase(5);
      addPropertyMaker("left", l);
   }

   private void createAuralProperties() {
      PropertyMaker m = new ToBeImplementedProperty.Maker(6);
      m.setInherited(true);
      m.setDefault("center");
      addPropertyMaker("azimuth", m);
      m = new ToBeImplementedProperty.Maker(83);
      m.setInherited(false);
      m.setDefault("none");
      addPropertyMaker("cue-after", m);
      m = new ToBeImplementedProperty.Maker(84);
      m.setInherited(false);
      m.setDefault("none");
      addPropertyMaker("cue-before", m);
      m = new ToBeImplementedProperty.Maker(89);
      m.setInherited(true);
      m.setDefault("level");
      addPropertyMaker("elevation", m);
      m = new ToBeImplementedProperty.Maker(188);
      m.setInherited(false);
      m.setDefault("");
      addPropertyMaker("pause-after", m);
      m = new ToBeImplementedProperty.Maker(189);
      m.setInherited(false);
      m.setDefault("");
      addPropertyMaker("pause-before", m);
      m = new ToBeImplementedProperty.Maker(190);
      m.setInherited(true);
      m.setDefault("medium");
      addPropertyMaker("pitch", m);
      m = new ToBeImplementedProperty.Maker(191);
      m.setInherited(true);
      m.setDefault("50");
      addPropertyMaker("pitch-range", m);
      m = new ToBeImplementedProperty.Maker(192);
      m.setInherited(false);
      m.setDefault("auto");
      addPropertyMaker("play-during", m);
      m = new ToBeImplementedProperty.Maker(210);
      m.setInherited(true);
      m.setDefault("50");
      addPropertyMaker("richness", m);
      m = new ToBeImplementedProperty.Maker(227);
      m.setInherited(true);
      m.setDefault("normal");
      addPropertyMaker("speak", m);
      m = new ToBeImplementedProperty.Maker(228);
      m.setInherited(true);
      m.setDefault("once");
      addPropertyMaker("speak-header", m);
      m = new ToBeImplementedProperty.Maker(229);
      m.setInherited(true);
      m.setDefault("continuous");
      addPropertyMaker("speak-numeral", m);
      m = new ToBeImplementedProperty.Maker(230);
      m.setInherited(true);
      m.setDefault("none");
      addPropertyMaker("speak-punctuation", m);
      m = new ToBeImplementedProperty.Maker(231);
      m.setInherited(true);
      m.setDefault("medium");
      addPropertyMaker("speech-rate", m);
      m = new ToBeImplementedProperty.Maker(236);
      m.setInherited(true);
      m.setDefault("50");
      addPropertyMaker("stress", m);
      m = new ToBeImplementedProperty.Maker(258);
      m.setInherited(true);
      m.setDefault("");
      addPropertyMaker("voice-family", m);
      m = new ToBeImplementedProperty.Maker(259);
      m.setInherited(true);
      m.setDefault("medium");
      addPropertyMaker("volume", m);
   }

   private void createBorderPaddingBackgroundProperties() {
      PropertyMaker m = new EnumProperty.Maker(8);
      m.setInherited(false);
      m.addEnum("scroll", this.getEnumProperty(126, "SCROLL"));
      m.addEnum("fixed", this.getEnumProperty(51, "FIXED"));
      m.setDefault("scroll");
      addPropertyMaker("background-attachment", m);
      PropertyMaker m = new ColorProperty.Maker(9) {
         protected Property convertPropertyDatatype(Property p, PropertyList propertyList, FObj fo) throws PropertyException {
            String nameval = p.getNCname();
            if (nameval != null) {
               FObj fobj = fo == null ? propertyList.getFObj() : fo;
               FOUserAgent ua = fobj == null ? null : fobj.getUserAgent();
               return ColorProperty.getInstance(ua, nameval);
            } else {
               return super.convertPropertyDatatype(p, propertyList, fo);
            }
         }
      };
      m.useGeneric(this.genericColor);
      m.setInherited(false);
      m.setDefault("transparent");
      addPropertyMaker("background-color", m);
      PropertyMaker m = new StringProperty.Maker(10);
      m.setInherited(false);
      m.setDefault("none");
      addPropertyMaker("background-image", m);
      m = new EnumProperty.Maker(14);
      m.setInherited(false);
      m.addEnum("repeat", this.getEnumProperty(112, "REPEAT"));
      m.addEnum("repeat-x", this.getEnumProperty(113, "REPEATX"));
      m.addEnum("repeat-y", this.getEnumProperty(114, "REPEATY"));
      m.addEnum("no-repeat", this.getEnumProperty(96, "NOREPEAT"));
      m.setDefault("repeat");
      addPropertyMaker("background-repeat", m);
      PropertyMaker m = new LengthProperty.Maker(12);
      m.setInherited(false);
      m.setDefault("0pt");
      m.addKeyword("left", "0pt");
      m.addKeyword("center", "50%");
      m.addKeyword("right", "100%");
      m.setPercentBase(9);
      m.addShorthand(s_generics[11]);
      addPropertyMaker("background-position-horizontal", m);
      m = new LengthProperty.Maker(13);
      m.setInherited(false);
      m.setDefault("0pt");
      m.addKeyword("top", "0pt");
      m.addKeyword("center", "50%");
      m.addKeyword("bottom", "100%");
      m.setPercentBase(10);
      m.addShorthand(s_generics[11]);
      addPropertyMaker("background-position-vertical", m);
      m = new ColorProperty.Maker(23);
      m.useGeneric(this.genericColor);
      m.setInherited(false);
      m.setDefault("black");
      CorrespondingPropertyMaker corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(53, 53, 42);
      corr.setRelative(true);
      addPropertyMaker("border-before-color", m);
      m = new EnumProperty.Maker(25);
      m.useGeneric(this.genericBorderStyle);
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(54, 54, 43);
      corr.setRelative(true);
      addPropertyMaker("border-before-style", m);
      PropertyMaker m = new CondLengthProperty.Maker(26);
      m.useGeneric(this.genericCondBorderWidth);
      m.getSubpropMaker(1024).setDefault("discard");
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(55, 55, 44);
      corr.setRelative(true);
      addPropertyMaker("border-before-width", m);
      m = new ColorProperty.Maker(19);
      m.useGeneric(this.genericColor);
      m.setInherited(false);
      m.setDefault("black");
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(28, 28, 38);
      corr.setRelative(true);
      addPropertyMaker("border-after-color", m);
      m = new EnumProperty.Maker(21);
      m.useGeneric(this.genericBorderStyle);
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(29, 29, 39);
      corr.setRelative(true);
      addPropertyMaker("border-after-style", m);
      m = new CondLengthProperty.Maker(22);
      m.useGeneric(this.genericCondBorderWidth);
      m.getSubpropMaker(1024).setDefault("discard");
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(30, 30, 40);
      corr.setRelative(true);
      addPropertyMaker("border-after-width", m);
      m = new ColorProperty.Maker(47);
      m.useGeneric(this.genericColor);
      m.setInherited(false);
      m.setDefault("black");
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(38, 42, 53);
      corr.setRelative(true);
      addPropertyMaker("border-start-color", m);
      m = new EnumProperty.Maker(49);
      m.useGeneric(this.genericBorderStyle);
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(39, 43, 54);
      corr.setRelative(true);
      addPropertyMaker("border-start-style", m);
      m = new CondLengthProperty.Maker(50);
      m.useGeneric(this.genericCondBorderWidth);
      m.getSubpropMaker(1024).setDefault("discard");
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(40, 44, 55);
      corr.setRelative(true);
      addPropertyMaker("border-start-width", m);
      m = new ColorProperty.Maker(33);
      m.useGeneric(this.genericColor);
      m.setInherited(false);
      m.setDefault("black");
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(42, 38, 28);
      corr.setRelative(true);
      addPropertyMaker("border-end-color", m);
      m = new EnumProperty.Maker(35);
      m.useGeneric(this.genericBorderStyle);
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(43, 39, 29);
      corr.setRelative(true);
      addPropertyMaker("border-end-style", m);
      m = new CondLengthProperty.Maker(36);
      m.useGeneric(this.genericCondBorderWidth);
      m.getSubpropMaker(1024).setDefault("discard");
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(44, 40, 30);
      corr.setRelative(true);
      addPropertyMaker("border-end-width", m);
      m = new ColorProperty.Maker(53);
      m.useGeneric(this.genericColor);
      m.setInherited(false);
      m.setDefault("black");
      m.addShorthand(s_generics[52]);
      m.addShorthand(s_generics[32]);
      m.addShorthand(s_generics[18]);
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(23, 23, 47);
      addPropertyMaker("border-top-color", m);
      m = new EnumProperty.Maker(54);
      m.useGeneric(this.genericBorderStyle);
      m.addShorthand(s_generics[52]);
      m.addShorthand(s_generics[51]);
      m.addShorthand(s_generics[18]);
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(25, 25, 49);
      addPropertyMaker("border-top-style", m);
      BorderWidthPropertyMaker bwm = new BorderWidthPropertyMaker(55);
      bwm.useGeneric(this.genericBorderWidth);
      bwm.setBorderStyleId(54);
      bwm.addShorthand(s_generics[52]);
      bwm.addShorthand(s_generics[56]);
      bwm.addShorthand(s_generics[18]);
      corr = new CorrespondingPropertyMaker(bwm);
      corr.setCorresponding(26, 26, 50);
      addPropertyMaker("border-top-width", bwm);
      m = new ColorProperty.Maker(28);
      m.useGeneric(this.genericColor);
      m.setInherited(false);
      m.setDefault("black");
      m.addShorthand(s_generics[27]);
      m.addShorthand(s_generics[32]);
      m.addShorthand(s_generics[18]);
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(19, 19, 33);
      addPropertyMaker("border-bottom-color", m);
      m = new EnumProperty.Maker(29);
      m.useGeneric(this.genericBorderStyle);
      m.addShorthand(s_generics[27]);
      m.addShorthand(s_generics[51]);
      m.addShorthand(s_generics[18]);
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(21, 21, 35);
      addPropertyMaker("border-bottom-style", m);
      bwm = new BorderWidthPropertyMaker(30);
      bwm.useGeneric(this.genericBorderWidth);
      bwm.setBorderStyleId(29);
      bwm.addShorthand(s_generics[27]);
      bwm.addShorthand(s_generics[56]);
      bwm.addShorthand(s_generics[18]);
      corr = new CorrespondingPropertyMaker(bwm);
      corr.setCorresponding(22, 22, 36);
      addPropertyMaker("border-bottom-width", bwm);
      m = new ColorProperty.Maker(38);
      m.useGeneric(this.genericColor);
      m.setInherited(false);
      m.setDefault("black");
      m.addShorthand(s_generics[37]);
      m.addShorthand(s_generics[32]);
      m.addShorthand(s_generics[18]);
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(47, 33, 19);
      addPropertyMaker("border-left-color", m);
      m = new EnumProperty.Maker(39);
      m.useGeneric(this.genericBorderStyle);
      m.addShorthand(s_generics[37]);
      m.addShorthand(s_generics[51]);
      m.addShorthand(s_generics[18]);
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(49, 35, 21);
      addPropertyMaker("border-left-style", m);
      bwm = new BorderWidthPropertyMaker(40);
      bwm.useGeneric(this.genericBorderWidth);
      bwm.setBorderStyleId(39);
      bwm.addShorthand(s_generics[37]);
      bwm.addShorthand(s_generics[56]);
      bwm.addShorthand(s_generics[18]);
      corr = new CorrespondingPropertyMaker(bwm);
      corr.setCorresponding(50, 36, 22);
      addPropertyMaker("border-left-width", bwm);
      m = new ColorProperty.Maker(42);
      m.useGeneric(this.genericColor);
      m.setInherited(false);
      m.setDefault("black");
      m.addShorthand(s_generics[41]);
      m.addShorthand(s_generics[32]);
      m.addShorthand(s_generics[18]);
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(33, 47, 23);
      addPropertyMaker("border-right-color", m);
      m = new EnumProperty.Maker(43);
      m.useGeneric(this.genericBorderStyle);
      m.addShorthand(s_generics[41]);
      m.addShorthand(s_generics[51]);
      m.addShorthand(s_generics[18]);
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(35, 49, 25);
      addPropertyMaker("border-right-style", m);
      bwm = new BorderWidthPropertyMaker(44);
      bwm.useGeneric(this.genericBorderWidth);
      bwm.setBorderStyleId(43);
      bwm.addShorthand(s_generics[41]);
      bwm.addShorthand(s_generics[56]);
      bwm.addShorthand(s_generics[18]);
      corr = new CorrespondingPropertyMaker(bwm);
      corr.setCorresponding(36, 50, 26);
      addPropertyMaker("border-right-width", bwm);
      m = new CondLengthProperty.Maker(172);
      m.useGeneric(this.genericCondPadding);
      m.getSubpropMaker(1024).setDefault("discard");
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(178, 178, 176);
      corr.setRelative(true);
      addPropertyMaker("padding-before", m);
      m = new CondLengthProperty.Maker(171);
      m.useGeneric(this.genericCondPadding);
      m.getSubpropMaker(1024).setDefault("discard");
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(173, 173, 175);
      corr.setRelative(true);
      addPropertyMaker("padding-after", m);
      m = new CondLengthProperty.Maker(177);
      m.useGeneric(this.genericCondPadding);
      m.getSubpropMaker(1024).setDefault("discard");
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(175, 176, 178);
      corr.setRelative(true);
      addPropertyMaker("padding-start", m);
      m = new CondLengthProperty.Maker(174);
      m.useGeneric(this.genericCondPadding);
      m.getSubpropMaker(1024).setDefault("discard");
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(176, 175, 173);
      corr.setRelative(true);
      addPropertyMaker("padding-end", m);
      m = new LengthProperty.Maker(178);
      m.useGeneric(this.genericPadding);
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(172, 172, 177);
      addPropertyMaker("padding-top", m);
      m = new LengthProperty.Maker(173);
      m.useGeneric(this.genericPadding);
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(171, 171, 174);
      addPropertyMaker("padding-bottom", m);
      m = new LengthProperty.Maker(175);
      m.useGeneric(this.genericPadding);
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(177, 174, 171);
      addPropertyMaker("padding-left", m);
      m = new LengthProperty.Maker(176);
      m.useGeneric(this.genericPadding);
      corr = new CorrespondingPropertyMaker(m);
      corr.setCorresponding(174, 177, 172);
      addPropertyMaker("padding-right", m);
   }

   private void createFontProperties() {
      PropertyMaker m = new FontFamilyProperty.Maker(101);
      m.setInherited(true);
      m.setDefault("sans-serif,Symbol,ZapfDingbats");
      m.addShorthand(s_generics[100]);
      addPropertyMaker("font-family", m);
      PropertyMaker m = new EnumProperty.Maker(102);
      m.setInherited(true);
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.addEnum("character-by-character", this.getEnumProperty(25, "CHARACTER_BY_CHARACTER"));
      m.setDefault("auto");
      addPropertyMaker("font-selection-strategy", m);
      PropertyMaker m = new FontSizePropertyMaker(103);
      m.setInherited(true);
      m.setDefault("12pt");
      m.addKeyword("xx-small", "6.944pt");
      m.addKeyword("x-small", "8.333pt");
      m.addKeyword("small", "10pt");
      m.addKeyword("medium", "12pt");
      m.addKeyword("large", "14.4pt");
      m.addKeyword("x-large", "17.28pt");
      m.addKeyword("xx-large", "20.736pt");
      m.addEnum("larger", this.getEnumProperty(71, "LARGER"));
      m.addEnum("smaller", this.getEnumProperty(132, "SMALLER"));
      m.setPercentBase(2);
      m.addShorthand(s_generics[100]);
      addPropertyMaker("font-size", m);
      PropertyMaker m = new FontStretchPropertyMaker(105);
      m.addEnum("normal", this.getEnumProperty(97, "NORMAL"));
      m.addEnum("wider", this.getEnumProperty(160, "WIDER"));
      m.addEnum("narrower", this.getEnumProperty(85, "NARROWER"));
      m.addEnum("ultra-condensed", this.getEnumProperty(150, "ULTRA_CONDENSED"));
      m.addEnum("extra-condensed", this.getEnumProperty(46, "EXTRA_CONDENSED"));
      m.addEnum("condensed", this.getEnumProperty(29, "CONDENSED"));
      m.addEnum("semi-condensed", this.getEnumProperty(127, "SEMI_CONDENSED"));
      m.addEnum("semi-expanded", this.getEnumProperty(128, "SEMI_EXPANDED"));
      m.addEnum("expanded", this.getEnumProperty(45, "EXPANDED"));
      m.addEnum("extra-expanded", this.getEnumProperty(47, "EXTRA_EXPANDED"));
      m.addEnum("ultra-expanded", this.getEnumProperty(151, "ULTRA_EXPANDED"));
      m.setDefault("normal");
      addPropertyMaker("font-stretch", m);
      PropertyMaker m = new NumberProperty.Maker(104);
      m.setInherited(true);
      m.addEnum("none", this.getEnumProperty(95, "NONE"));
      m.setDefault("none");
      addPropertyMaker("font-size-adjust", m);
      m = new EnumProperty.Maker(106);
      m.setInherited(true);
      m.addEnum("normal", this.getEnumProperty(97, "NORMAL"));
      m.addEnum("italic", this.getEnumProperty(164, "ITALIC"));
      m.addEnum("oblique", this.getEnumProperty(165, "OBLIQUE"));
      m.addEnum("backslant", this.getEnumProperty(166, "BACKSLANT"));
      m.setDefault("normal");
      m.addShorthand(s_generics[100]);
      addPropertyMaker("font-style", m);
      m = new EnumProperty.Maker(107);
      m.setInherited(true);
      m.addEnum("normal", this.getEnumProperty(97, "NORMAL"));
      m.addEnum("small-caps", this.getEnumProperty(131, "SMALL_CAPS"));
      m.setDefault("normal");
      m.addShorthand(s_generics[100]);
      addPropertyMaker("font-variant", m);
      PropertyMaker m = new FontWeightPropertyMaker(108);
      m.setInherited(true);
      m.addKeyword("normal", "400");
      m.addKeyword("bold", "700");
      m.addEnum("bolder", this.getEnumProperty(167, "BOLDER"));
      m.addEnum("lighter", this.getEnumProperty(168, "LIGHTER"));
      m.addEnum("100", this.getEnumProperty(169, "100"));
      m.addEnum("200", this.getEnumProperty(170, "200"));
      m.addEnum("300", this.getEnumProperty(171, "300"));
      m.addEnum("400", this.getEnumProperty(172, "400"));
      m.addEnum("500", this.getEnumProperty(173, "500"));
      m.addEnum("600", this.getEnumProperty(174, "600"));
      m.addEnum("700", this.getEnumProperty(175, "700"));
      m.addEnum("800", this.getEnumProperty(176, "800"));
      m.addEnum("900", this.getEnumProperty(177, "900"));
      m.setDefault("400");
      m.addShorthand(s_generics[100]);
      addPropertyMaker("font-weight", m);
   }

   private void createHyphenationProperties() {
      PropertyMaker m = new StringProperty.Maker(81);
      m.setInherited(true);
      m.setDefault("none");
      m.addShorthand(s_generics[268]);
      addPropertyMaker("country", m);
      m = new StringProperty.Maker(134);
      m.setInherited(true);
      m.setDefault("none");
      m.addShorthand(s_generics[268]);
      addPropertyMaker("language", m);
      m = new StringProperty.Maker(218);
      m.setInherited(true);
      m.setDefault("auto");
      addPropertyMaker("script", m);
      PropertyMaker m = new EnumProperty.Maker(116);
      m.useGeneric(this.genericBoolean);
      m.setInherited(true);
      m.setDefault("false");
      addPropertyMaker("hyphenate", m);
      PropertyMaker m = new CharacterProperty.Maker(117);
      m.setInherited(true);
      m.setDefault("-");
      addPropertyMaker("hyphenation-character", m);
      PropertyMaker m = new NumberProperty.PositiveIntegerMaker(120);
      m.setInherited(true);
      m.setDefault("2");
      addPropertyMaker("hyphenation-push-character-count", m);
      m = new NumberProperty.PositiveIntegerMaker(121);
      m.setInherited(true);
      m.setDefault("2");
      addPropertyMaker("hyphenation-remain-character-count", m);
   }

   private void createMarginBlockProperties() {
      PropertyMaker m = new LengthProperty.Maker(151);
      m.setInherited(false);
      m.setDefault("0pt");
      m.addShorthand(s_generics[147]);
      m.setPercentBase(5);
      addPropertyMaker("margin-top", m);
      m = new LengthProperty.Maker(148);
      m.setInherited(false);
      m.setDefault("0pt");
      m.addShorthand(s_generics[147]);
      m.setPercentBase(5);
      addPropertyMaker("margin-bottom", m);
      m = new LengthProperty.Maker(149);
      m.setInherited(false);
      m.setDefault("0pt");
      m.addShorthand(s_generics[147]);
      m.setPercentBase(5);
      addPropertyMaker("margin-left", m);
      m = new LengthProperty.Maker(150);
      m.setInherited(false);
      m.setDefault("0pt");
      m.addShorthand(s_generics[147]);
      m.setPercentBase(5);
      addPropertyMaker("margin-right", m);
      PropertyMaker m = new SpaceProperty.Maker(223);
      m.useGeneric(this.genericSpace);
      CorrespondingPropertyMaker corr = new SpacePropertyMaker(m);
      corr.setCorresponding(151, 151, 150);
      corr.setUseParent(false);
      corr.setRelative(true);
      addPropertyMaker("space-before", m);
      m = new SpaceProperty.Maker(222);
      m.useGeneric(this.genericSpace);
      corr = new SpacePropertyMaker(m);
      corr.setCorresponding(148, 148, 149);
      corr.setUseParent(false);
      corr.setRelative(true);
      addPropertyMaker("space-after", m);
      m = new LengthProperty.Maker(233);
      m.setInherited(true);
      m.setDefault("0pt");
      m.setPercentBase(4);
      IndentPropertyMaker sCorr = new IndentPropertyMaker(m);
      sCorr.setCorresponding(149, 150, 151);
      sCorr.setUseParent(false);
      sCorr.setRelative(true);
      sCorr.setPaddingCorresponding(new int[]{175, 176, 178});
      sCorr.setBorderWidthCorresponding(new int[]{40, 44, 55});
      addPropertyMaker("start-indent", m);
      m = new LengthProperty.Maker(91);
      m.setInherited(true);
      m.setDefault("0pt");
      m.setPercentBase(4);
      IndentPropertyMaker eCorr = new IndentPropertyMaker(m);
      eCorr.setCorresponding(150, 149, 148);
      eCorr.setUseParent(false);
      eCorr.setRelative(true);
      eCorr.setPaddingCorresponding(new int[]{176, 175, 173});
      eCorr.setBorderWidthCorresponding(new int[]{44, 40, 30});
      addPropertyMaker("end-indent", m);
   }

   private void createMarginInlineProperties() {
      PropertyMaker m = new SpaceProperty.Maker(224);
      m.useGeneric(this.genericSpace);
      addPropertyMaker("space-end", m);
      m = new SpaceProperty.Maker(225);
      m.useGeneric(this.genericSpace);
      addPropertyMaker("space-start", m);
   }

   private void createRelativePosProperties() {
      PropertyMaker m = new EnumProperty.Maker(203);
      m.setInherited(false);
      m.addEnum("static", this.getEnumProperty(136, "STATIC"));
      m.addEnum("relative", this.getEnumProperty(110, "RELATIVE"));
      m.setDefault("static");
      m.addShorthand(s_generics[193]);
      addPropertyMaker("relative-position", m);
   }

   private void createAreaAlignmentProperties() {
      PropertyMaker m = new LengthProperty.Maker(3);
      m.setInherited(false);
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.addEnum("baseline", this.getEnumProperty(12, "BASELINE"));
      m.addEnum("before-edge", this.getEnumProperty(14, "BEFORE_EDGE"));
      m.addEnum("text-before-edge", this.getEnumProperty(142, "TEXT_BEFORE_EDGE"));
      m.addEnum("middle", this.getEnumProperty(84, "MIDDLE"));
      m.addEnum("central", this.getEnumProperty(24, "CENTRAL"));
      m.addEnum("after-edge", this.getEnumProperty(4, "AFTER_EDGE"));
      m.addEnum("text-after-edge", this.getEnumProperty(141, "TEXT_AFTER_EDGE"));
      m.addEnum("ideographic", this.getEnumProperty(59, "IDEOGRAPHIC"));
      m.addEnum("alphabetic", this.getEnumProperty(6, "ALPHABETIC"));
      m.addEnum("hanging", this.getEnumProperty(56, "HANGING"));
      m.addEnum("mathematical", this.getEnumProperty(82, "MATHEMATICAL"));
      m.setDefault("auto");
      m.setPercentBase(12);
      m.addShorthand(s_generics[256]);
      addPropertyMaker("alignment-adjust", m);
      PropertyMaker m = new EnumProperty.Maker(4);
      m.setInherited(false);
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.addEnum("baseline", this.getEnumProperty(12, "BASELINE"));
      m.addEnum("before-edge", this.getEnumProperty(14, "BEFORE_EDGE"));
      m.addEnum("text-before-edge", this.getEnumProperty(142, "TEXT_BEFORE_EDGE"));
      m.addEnum("middle", this.getEnumProperty(84, "MIDDLE"));
      m.addEnum("central", this.getEnumProperty(24, "CENTRAL"));
      m.addEnum("after-edge", this.getEnumProperty(4, "AFTER_EDGE"));
      m.addEnum("text-after-edge", this.getEnumProperty(141, "TEXT_AFTER_EDGE"));
      m.addEnum("ideographic", this.getEnumProperty(59, "IDEOGRAPHIC"));
      m.addEnum("alphabetic", this.getEnumProperty(6, "ALPHABETIC"));
      m.addEnum("hanging", this.getEnumProperty(56, "HANGING"));
      m.addEnum("mathematical", this.getEnumProperty(82, "MATHEMATICAL"));
      m.setDefault("auto");
      m.addShorthand(s_generics[256]);
      addPropertyMaker("alignment-baseline", m);
      m = new LengthProperty.Maker(15);
      m.setInherited(false);
      m.addEnum("baseline", this.getEnumProperty(12, "BASELINE"));
      m.addEnum("sub", this.getEnumProperty(137, "SUB"));
      m.addEnum("super", this.getEnumProperty(138, "SUPER"));
      m.setDefault("baseline");
      m.addShorthand(s_generics[256]);
      m.setPercentBase(0);
      addPropertyMaker("baseline-shift", m);
      m = new EnumProperty.Maker(87);
      m.setInherited(true);
      m.addEnum("before", this.getEnumProperty(13, "BEFORE"));
      m.addEnum("after", this.getEnumProperty(3, "AFTER"));
      m.addEnum("center", this.getEnumProperty(23, "CENTER"));
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.addEnum("distribute", this.getEnumProperty(163, "DISTRIBUTE"));
      m.addEnum("fill", this.getEnumProperty(162, "FILL"));
      m.setDefault("auto");
      addPropertyMaker("display-align", m);
      m = new EnumProperty.Maker(88);
      m.setInherited(false);
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.addEnum("use-script", this.getEnumProperty(157, "USE_SCRIPT"));
      m.addEnum("no-change", this.getEnumProperty(87, "NO_CHANGE"));
      m.addEnum("reset-size", this.getEnumProperty(116, "RESET_SIZE"));
      m.addEnum("ideographic", this.getEnumProperty(59, "IDEOGRAPHIC"));
      m.addEnum("alphabetic", this.getEnumProperty(6, "ALPHABETIC"));
      m.addEnum("hanging", this.getEnumProperty(56, "HANGING"));
      m.addEnum("mathematical", this.getEnumProperty(82, "MATHEMATICAL"));
      m.addEnum("central", this.getEnumProperty(24, "CENTRAL"));
      m.addEnum("middle", this.getEnumProperty(84, "MIDDLE"));
      m.addEnum("text-after-edge", this.getEnumProperty(141, "TEXT_AFTER_EDGE"));
      m.addEnum("text-before-edge", this.getEnumProperty(142, "TEXT_BEFORE_EDGE"));
      m.setDefault("auto");
      m.addShorthand(s_generics[256]);
      addPropertyMaker("dominant-baseline", m);
      m = new EnumProperty.Maker(202);
      m.setInherited(true);
      m.addEnum("before", this.getEnumProperty(13, "BEFORE"));
      m.addEnum("baseline", this.getEnumProperty(12, "BASELINE"));
      m.setDefault("before");
      addPropertyMaker("relative-align", m);
   }

   private void createAreaDimensionProperties() {
      PropertyMaker m = new LengthRangeProperty.Maker(17);
      m.setInherited(false);
      m.setPercentBase(6);
      LengthProperty.Maker l = new LengthProperty.Maker(3072);
      l.setDefault("auto");
      l.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      l.setPercentBase(6);
      l.setByShorthand(true);
      m.addSubpropMaker(l);
      l = new LengthProperty.Maker(3584);
      l.setDefault("auto");
      l.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      l.setPercentBase(6);
      l.setByShorthand(true);
      m.addSubpropMaker(l);
      l = new LengthProperty.Maker(2560);
      l.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      l.setDefault("auto");
      l.setPercentBase(6);
      l.setByShorthand(true);
      m.addSubpropMaker(l);
      DimensionPropertyMaker pdim = new DimensionPropertyMaker(m);
      pdim.setCorresponding(115, 115, 264);
      pdim.setExtraCorresponding(new int[][]{{162, 162, 163}, {155, 155, 157}});
      pdim.setRelative(true);
      m.setCorresponding(pdim);
      addPropertyMaker("block-progression-dimension", m);
      l = new LengthProperty.Maker(78);
      l.setInherited(false);
      l.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      l.addEnum("scale-to-fit", this.getEnumProperty(125, "SCALE_TO_FIT"));
      l.addEnum("scale-down-to-fit", this.getEnumProperty(187, "SCALE_DOWN_TO_FIT"));
      l.addEnum("scale-up-to-fit", this.getEnumProperty(188, "SCALE_UP_TO_FIT"));
      l.setDefault("auto");
      l.setPercentBase(8);
      addPropertyMaker("content-height", l);
      l = new LengthProperty.Maker(80);
      l.setInherited(false);
      l.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      l.addEnum("scale-to-fit", this.getEnumProperty(125, "SCALE_TO_FIT"));
      l.addEnum("scale-down-to-fit", this.getEnumProperty(187, "SCALE_DOWN_TO_FIT"));
      l.addEnum("scale-up-to-fit", this.getEnumProperty(188, "SCALE_UP_TO_FIT"));
      l.setDefault("auto");
      l.setPercentBase(7);
      addPropertyMaker("content-width", l);
      l = new LengthProperty.Maker(115);
      l.setInherited(false);
      l.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      l.setPercentBase(6);
      l.setDefault("auto");
      addPropertyMaker("height", l);
      m = new LengthRangeProperty.Maker(127);
      m.setInherited(false);
      m.setPercentBase(5);
      l = new LengthProperty.Maker(3072);
      l.setDefault("auto");
      l.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      l.setPercentBase(5);
      l.setByShorthand(true);
      m.addSubpropMaker(l);
      l = new LengthProperty.Maker(3584);
      l.setDefault("auto");
      l.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      l.setPercentBase(5);
      l.setByShorthand(true);
      m.addSubpropMaker(l);
      l = new LengthProperty.Maker(2560);
      l.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      l.setDefault("auto");
      l.setPercentBase(5);
      l.setByShorthand(true);
      m.addSubpropMaker(l);
      pdim = new DimensionPropertyMaker(m);
      pdim.setRelative(true);
      pdim.setCorresponding(264, 264, 115);
      pdim.setExtraCorresponding(new int[][]{{163, 163, 162}, {157, 157, 155}});
      m.setCorresponding(pdim);
      addPropertyMaker("inline-progression-dimension", m);
      PropertyMaker m = new LengthProperty.Maker(155);
      m.addEnum("NONE", this.getEnumProperty(95, "NONE"));
      m.setInherited(false);
      m.setDefault("0pt");
      m.setPercentBase(6);
      addPropertyMaker("max-height", m);
      m = new LengthProperty.Maker(157);
      m.addEnum("NONE", this.getEnumProperty(95, "NONE"));
      m.setInherited(false);
      m.setDefault("none");
      m.setPercentBase(5);
      addPropertyMaker("max-width", m);
      m = new LengthProperty.Maker(162);
      m.setInherited(false);
      m.setDefault("0pt");
      m.setPercentBase(6);
      addPropertyMaker("min-height", m);
      m = new LengthProperty.Maker(163);
      m.setInherited(false);
      m.setDefault("");
      m.setPercentBase(5);
      addPropertyMaker("min-width", m);
      PropertyMaker m = new EnumProperty.Maker(215);
      m.setInherited(true);
      m.addEnum("uniform", this.getEnumProperty(154, "UNIFORM"));
      m.addEnum("non-uniform", this.getEnumProperty(94, "NON_UNIFORM"));
      m.setDefault("uniform");
      addPropertyMaker("scaling", m);
      m = new EnumProperty.Maker(216);
      m.setInherited(false);
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.addEnum("integer-pixels", this.getEnumProperty(69, "INTEGER_PIXELS"));
      m.addEnum("resample-any-method", this.getEnumProperty(115, "RESAMPLE_ANY_METHOD"));
      m.setDefault("auto");
      addPropertyMaker("scaling-method", m);
      l = new LengthProperty.Maker(264);
      l.setInherited(false);
      l.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      l.setPercentBase(5);
      l.setDefault("auto");
      addPropertyMaker("width", l);
      l = new LengthProperty.Maker(270);
      l.setInherited(false);
      l.setDefault("0pt");
      addPropertyMaker("fox:block-progression-unit", l);
   }

   private void createBlockAndLineProperties() {
      PropertyMaker m = new EnumProperty.Maker(118);
      m.setInherited(true);
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.addEnum("column", this.getEnumProperty(28, "COLUMN"));
      m.addEnum("page", this.getEnumProperty(104, "PAGE"));
      m.setDefault("auto");
      addPropertyMaker("hyphenation-keep", m);
      PropertyMaker m = new NumberProperty.Maker(119);
      m.setInherited(true);
      m.addEnum("no-limit", this.getEnumProperty(89, "NO_LIMIT"));
      m.setDefault("no-limit");
      addPropertyMaker("hyphenation-ladder-count", m);
      PropertyMaker m = new LengthProperty.Maker(135);
      m.setInherited(true);
      m.setDefault("0pt");
      m.setPercentBase(5);
      addPropertyMaker("last-line-end-indent", m);
      PropertyMaker m = new LineHeightPropertyMaker(144);
      m.useGeneric(this.genericSpace);
      m.setInherited(true);
      m.addKeyword("normal", "1.2");
      m.setPercentBase(1);
      m.setDefault("normal", true);
      m.addShorthand(s_generics[100]);
      addPropertyMaker("line-height", m);
      m = new EnumProperty.Maker(145);
      m.setInherited(true);
      m.addEnum("consider-shifts", this.getEnumProperty(30, "CONSIDER_SHIFTS"));
      m.addEnum("disregard-shifts", this.getEnumProperty(33, "DISREGARD_SHIFTS"));
      m.setDefault("consider-shifts");
      addPropertyMaker("line-height-shift-adjustment", m);
      m = new EnumProperty.Maker(146);
      m.setInherited(true);
      m.addEnum("line-height", this.getEnumProperty(76, "LINE_HEIGHT"));
      m.addEnum("font-height", this.getEnumProperty(52, "FONT_HEIGHT"));
      m.addEnum("max-height", this.getEnumProperty(83, "MAX_HEIGHT"));
      m.setDefault("max-height");
      addPropertyMaker("line-stacking-strategy", m);
      m = new EnumProperty.Maker(143);
      m.setInherited(true);
      m.addEnum("ignore", this.getEnumProperty(60, "IGNORE"));
      m.addEnum("preserve", this.getEnumProperty(108, "PRESERVE"));
      m.addEnum("treat-as-space", this.getEnumProperty(147, "TREAT_AS_SPACE"));
      m.addEnum("treat-as-zero-width-space", this.getEnumProperty(148, "TREAT_AS_ZERO_WIDTH_SPACE"));
      m.setDefault("treat-as-space");
      m.addShorthand(s_generics[260]);
      addPropertyMaker("linefeed-treatment", m);
      m = new EnumProperty.Maker(262);
      m.setInherited(true);
      m.addEnum("ignore", this.getEnumProperty(60, "IGNORE"));
      m.addEnum("preserve", this.getEnumProperty(108, "PRESERVE"));
      m.addEnum("ignore-if-before-linefeed", this.getEnumProperty(62, "IGNORE_IF_BEFORE_LINEFEED"));
      m.addEnum("ignore-if-after-linefeed", this.getEnumProperty(61, "IGNORE_IF_AFTER_LINEFEED"));
      m.addEnum("ignore-if-surrounding-linefeed", this.getEnumProperty(63, "IGNORE_IF_SURROUNDING_LINEFEED"));
      m.setDefault("ignore-if-surrounding-linefeed");
      m.addShorthand(s_generics[260]);
      addPropertyMaker("white-space-treatment", m);
      m = new EnumProperty.Maker(245);
      m.setInherited(true);
      m.addEnum("center", this.getEnumProperty(23, "CENTER"));
      m.addEnum("end", this.getEnumProperty(39, "END"));
      m.addEnum("right", this.getEnumProperty(39, "END"));
      m.addEnum("start", this.getEnumProperty(135, "START"));
      m.addEnum("left", this.getEnumProperty(135, "START"));
      m.addEnum("justify", this.getEnumProperty(70, "JUSTIFY"));
      m.addEnum("inside", this.getEnumProperty(135, "START"));
      m.addEnum("outside", this.getEnumProperty(39, "END"));
      m.setDefault("start");
      addPropertyMaker("text-align", m);
      m = new EnumProperty.Maker(246) {
         public Property get(int subpropId, PropertyList propertyList, boolean bTryInherit, boolean bTryDefault) throws PropertyException {
            Property p = super.get(subpropId, propertyList, bTryInherit, bTryDefault);
            if (p != null && p.getEnum() == 110) {
               p = propertyList.getNearestSpecified(246);
               if (p.getEnum() == 110) {
                  return this.calcRelative(propertyList);
               }
            }

            return p;
         }

         private Property calcRelative(PropertyList propertyList) throws PropertyException {
            Property corresponding = propertyList.get(245);
            if (corresponding == null) {
               return null;
            } else {
               int correspondingValue = corresponding.getEnum();
               if (correspondingValue == 70) {
                  return FOPropertyMapping.this.getEnumProperty(135, "START");
               } else if (correspondingValue == 39) {
                  return FOPropertyMapping.this.getEnumProperty(39, "END");
               } else if (correspondingValue == 135) {
                  return FOPropertyMapping.this.getEnumProperty(135, "START");
               } else {
                  return correspondingValue == 23 ? FOPropertyMapping.this.getEnumProperty(23, "CENTER") : null;
               }
            }
         }
      };
      m.setInherited(false);
      m.addEnum("relative", this.getEnumProperty(110, "RELATIVE"));
      m.addEnum("center", this.getEnumProperty(23, "CENTER"));
      m.addEnum("end", this.getEnumProperty(39, "END"));
      m.addEnum("right", this.getEnumProperty(39, "END"));
      m.addEnum("start", this.getEnumProperty(135, "START"));
      m.addEnum("left", this.getEnumProperty(135, "START"));
      m.addEnum("justify", this.getEnumProperty(70, "JUSTIFY"));
      m.addEnum("inside", this.getEnumProperty(135, "START"));
      m.addEnum("outside", this.getEnumProperty(39, "END"));
      m.setDefault("relative", true);
      addPropertyMaker("text-align-last", m);
      m = new LengthProperty.Maker(250);
      m.setInherited(true);
      m.setDefault("0pt");
      m.setPercentBase(5);
      addPropertyMaker("text-indent", m);
      m = new EnumProperty.Maker(261);
      m.useGeneric(this.genericBoolean);
      m.setInherited(true);
      m.setDefault("true");
      m.addShorthand(s_generics[260]);
      addPropertyMaker("white-space-collapse", m);
      m = new EnumProperty.Maker(266);
      m.setInherited(true);
      m.addEnum("wrap", this.getEnumProperty(161, "WRAP"));
      m.addEnum("no-wrap", this.getEnumProperty(93, "NO_WRAP"));
      m.setDefault("wrap");
      m.addShorthand(s_generics[260]);
      addPropertyMaker("wrap-option", m);
   }

   private void createCharacterProperties() {
      PropertyMaker m = new CharacterProperty.Maker(69);
      m.setInherited(false);
      m.setDefault("none");
      addPropertyMaker("character", m);
      PropertyMaker m = new SpacingPropertyMaker(141);
      m.useGeneric(this.genericSpace);
      m.setInherited(true);
      m.getSubpropMaker(4096).setDefault("force");
      m.getSubpropMaker(1024).setDefault("discard");
      m.setDefault("normal");
      m.addEnum("normal", this.getEnumProperty(97, "NORMAL"));
      addPropertyMaker("letter-spacing", m);
      PropertyMaker m = new EnumProperty.Maker(237);
      m.setInherited(false);
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.addEnum("suppress", this.getEnumProperty(139, "SUPPRESS"));
      m.addEnum("retain", this.getEnumProperty(118, "RETAIN"));
      m.setDefault("auto");
      addPropertyMaker("suppress-at-line-break", m);
      PropertyMaker m = new TextDecorationProperty.Maker(248);
      m.setInherited(false);
      m.addEnum("none", this.getEnumProperty(95, "NONE"));
      m.addEnum("underline", this.getEnumProperty(153, "UNDERLINE"));
      m.addEnum("overline", this.getEnumProperty(103, "OVERLINE"));
      m.addEnum("line-through", this.getEnumProperty(77, "LINE_THROUGH"));
      m.addEnum("blink", this.getEnumProperty(17, "BLINK"));
      m.addEnum("no-underline", this.getEnumProperty(92, "NO_UNDERLINE"));
      m.addEnum("no-overline", this.getEnumProperty(91, "NO_OVERLINE"));
      m.addEnum("no-line-through", this.getEnumProperty(90, "NO_LINE_THROUGH"));
      m.addEnum("no-blink", this.getEnumProperty(86, "NO_BLINK"));
      m.setDefault("none");
      addPropertyMaker("text-decoration", m);
      PropertyMaker m = new ToBeImplementedProperty.Maker(251);
      m.setInherited(false);
      m.setDefault("none");
      addPropertyMaker("text-shadow", m);
      m = new EnumProperty.Maker(252);
      m.setInherited(true);
      m.addEnum("none", this.getEnumProperty(95, "NONE"));
      m.addEnum("capitalize", this.getEnumProperty(22, "CAPITALIZE"));
      m.addEnum("uppercase", this.getEnumProperty(155, "UPPERCASE"));
      m.addEnum("lowercase", this.getEnumProperty(78, "LOWERCASE"));
      m.setDefault("none");
      addPropertyMaker("text-transform", m);
      m = new EnumProperty.Maker(254);
      m.useGeneric(this.genericBoolean);
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.setInherited(false);
      m.setDefault("auto");
      addPropertyMaker("treat-as-word-space", m);
      m = new SpacingPropertyMaker(265);
      m.useGeneric(this.genericSpace);
      m.setInherited(true);
      m.getSubpropMaker(4096).setDefault("force");
      m.getSubpropMaker(1024).setDefault("discard");
      m.setDefault("normal");
      m.addEnum("normal", this.getEnumProperty(97, "NORMAL"));
      addPropertyMaker("word-spacing", m);
   }

   private void createColorProperties() {
      PropertyMaker m = new ColorProperty.Maker(72);
      m.useGeneric(this.genericColor);
      m.setInherited(true);
      m.setDefault("black");
      addPropertyMaker("color", m);
      PropertyMaker m = new StringProperty.Maker(73);
      m.setInherited(false);
      m.setDefault("");
      addPropertyMaker("color-profile-name", m);
      PropertyMaker m = new EnumProperty.Maker(204);
      m.setInherited(false);
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.addEnum("perceptual", this.getEnumProperty(107, "PERCEPTUAL"));
      m.addEnum("relative-colorimetric", this.getEnumProperty(111, "RELATIVE_COLOMETRIC"));
      m.addEnum("saturation", this.getEnumProperty(124, "SATURATION"));
      m.addEnum("absolute-colorimetric", this.getEnumProperty(2, "ABSOLUTE_COLORMETRIC"));
      m.setDefault("auto");
      addPropertyMaker("rendering-intent", m);
   }

   private void createFloatProperties() {
      PropertyMaker m = new EnumProperty.Maker(70);
      m.setInherited(false);
      m.addEnum("start", this.getEnumProperty(135, "START"));
      m.addEnum("end", this.getEnumProperty(39, "END"));
      m.addEnum("left", this.getEnumProperty(135, "START"));
      m.addEnum("right", this.getEnumProperty(39, "END"));
      m.addEnum("both", this.getEnumProperty(19, "BOTH"));
      m.addEnum("none", this.getEnumProperty(95, "NONE"));
      m.setDefault("none");
      addPropertyMaker("clear", m);
      m = new EnumProperty.Maker(95);
      m.setInherited(false);
      m.addEnum("before", this.getEnumProperty(13, "BEFORE"));
      m.addEnum("start", this.getEnumProperty(135, "START"));
      m.addEnum("end", this.getEnumProperty(39, "END"));
      m.addEnum("left", this.getEnumProperty(135, "START"));
      m.addEnum("right", this.getEnumProperty(39, "END"));
      m.addEnum("none", this.getEnumProperty(95, "NONE"));
      m.setDefault("none");
      addPropertyMaker("float", m);
      m = new EnumProperty.Maker(130);
      m.setInherited(false);
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.addEnum("none", this.getEnumProperty(95, "NONE"));
      m.addEnum("line", this.getEnumProperty(75, "LINE"));
      m.addEnum("indent", this.getEnumProperty(65, "INDENT"));
      m.addEnum("block", this.getEnumProperty(18, "BLOCK"));
      m.setDefault("none");
      addPropertyMaker("intrusion-displace", m);
   }

   private void createKeepsAndBreaksProperties() {
      PropertyMaker m = new EnumProperty.Maker(58);
      m.useGeneric(this.genericBreak);
      m.addShorthand(s_generics[179]);
      addPropertyMaker("break-after", m);
      m = new EnumProperty.Maker(59);
      m.useGeneric(this.genericBreak);
      m.addShorthand(s_generics[180]);
      addPropertyMaker("break-before", m);
      PropertyMaker m = new KeepProperty.Maker(131);
      m.useGeneric(this.genericKeep);
      m.setInherited(true);
      m.setDefault("auto");
      m.addShorthand(s_generics[181]);
      addPropertyMaker("keep-together", m);
      m = new KeepProperty.Maker(132);
      m.useGeneric(this.genericKeep);
      m.setInherited(false);
      m.setDefault("auto");
      m.addShorthand(s_generics[179]);
      addPropertyMaker("keep-with-next", m);
      m = new KeepProperty.Maker(133);
      m.useGeneric(this.genericKeep);
      m.setInherited(false);
      m.setDefault("auto");
      m.addShorthand(s_generics[180]);
      addPropertyMaker("keep-with-previous", m);
      PropertyMaker m = new NumberProperty.Maker(168);
      m.setInherited(true);
      m.setDefault("2");
      addPropertyMaker("orphans", m);
      m = new NumberProperty.Maker(263);
      m.setInherited(true);
      m.setDefault("2");
      addPropertyMaker("widows", m);
      PropertyMaker m = new LengthProperty.Maker(271);
      m.setInherited(true);
      m.setDefault("0pt");
      addPropertyMaker("fox:widow-content-limit", m);
      m = new LengthProperty.Maker(272);
      m.setInherited(true);
      m.setDefault("0pt");
      addPropertyMaker("fox:orphan-content-limit", m);
   }

   private void createLayoutProperties() {
      PropertyMaker m = new ToBeImplementedProperty.Maker(71);
      m.setInherited(false);
      m.setDefault("auto");
      addPropertyMaker("clip", m);
      PropertyMaker m = new EnumProperty.Maker(169);
      m.setInherited(false);
      m.addEnum("visible", this.getEnumProperty(159, "VISIBLE"));
      m.addEnum("hidden", this.getEnumProperty(57, "HIDDEN"));
      m.addEnum("scroll", this.getEnumProperty(126, "SCROLL"));
      m.addEnum("error-if-overflow", this.getEnumProperty(42, "ERROR_IF_OVERFLOW"));
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.setDefault("auto");
      addPropertyMaker("overflow", m);
      PropertyMaker m = new ReferenceOrientationMaker(197);
      m.setInherited(true);
      m.setDefault("0");
      addPropertyMaker("reference-orientation", m);
      m = new EnumProperty.Maker(226);
      m.setInherited(false);
      m.addEnum("none", this.getEnumProperty(95, "NONE"));
      m.addEnum("all", this.getEnumProperty(5, "ALL"));
      m.setDefault("none");
      addPropertyMaker("span", m);
      m = new EnumProperty.Maker(273);
      m.useGeneric(this.genericBoolean);
      m.setInherited(true);
      m.setDefault("false");
      addPropertyMaker("fox:disable-column-balancing", m);
   }

   private void createLeaderAndRuleProperties() {
      PropertyMaker m = new EnumProperty.Maker(136);
      m.setInherited(true);
      m.addEnum("none", this.getEnumProperty(95, "NONE"));
      m.addEnum("reference-area", this.getEnumProperty(109, "REFERENCE_AREA"));
      m.addEnum("page", this.getEnumProperty(104, "PAGE"));
      m.setDefault("none");
      addPropertyMaker("leader-alignment", m);
      m = new EnumProperty.Maker(138);
      m.setInherited(true);
      m.addEnum("space", this.getEnumProperty(134, "SPACE"));
      m.addEnum("rule", this.getEnumProperty(123, "RULE"));
      m.addEnum("dots", this.getEnumProperty(35, "DOTS"));
      m.addEnum("use-content", this.getEnumProperty(158, "USECONTENT"));
      m.setDefault("space");
      addPropertyMaker("leader-pattern", m);
      PropertyMaker m = new LengthProperty.Maker(139);
      m.setInherited(true);
      m.setDefault("use-font-metrics", true);
      m.addKeyword("use-font-metrics", "0pt");
      m.setPercentBase(3);
      addPropertyMaker("leader-pattern-width", m);
      PropertyMaker m = new LengthRangeProperty.Maker(137);
      m.setInherited(true);
      m.setPercentBase(3);
      PropertyMaker sub = new LengthProperty.Maker(3072);
      sub.setDefault("0pt");
      sub.setPercentBase(5);
      sub.setByShorthand(true);
      m.addSubpropMaker(sub);
      sub = new LengthProperty.Maker(3584);
      sub.setDefault("12.0pt");
      sub.setPercentBase(5);
      sub.setByShorthand(true);
      m.addSubpropMaker(sub);
      sub = new LengthProperty.Maker(2560);
      sub.setDefault("100%", true);
      sub.setPercentBase(5);
      sub.setByShorthand(true);
      m.addSubpropMaker(sub);
      addPropertyMaker("leader-length", m);
      m = new EnumProperty.Maker(213);
      m.setInherited(true);
      m.addEnum("none", this.getEnumProperty(95, "NONE"));
      m.addEnum("dotted", this.getEnumProperty(36, "DOTTED"));
      m.addEnum("dashed", this.getEnumProperty(31, "DASHED"));
      m.addEnum("solid", this.getEnumProperty(133, "SOLID"));
      m.addEnum("double", this.getEnumProperty(37, "DOUBLE"));
      m.addEnum("groove", this.getEnumProperty(55, "GROOVE"));
      m.addEnum("ridge", this.getEnumProperty(119, "RIDGE"));
      m.setDefault("solid");
      addPropertyMaker("rule-style", m);
      m = new LengthProperty.Maker(214);
      m.setInherited(true);
      m.setDefault("1.0pt");
      addPropertyMaker("rule-thickness", m);
   }

   private void createDynamicProperties() {
      PropertyMaker m = new ToBeImplementedProperty.Maker(2);
      m.setInherited(false);
      m.setDefault("");
      addPropertyMaker("active-state", m);
      m = new ToBeImplementedProperty.Maker(5);
      m.setInherited(true);
      m.setDefault("false");
      addPropertyMaker("auto-restore", m);
      m = new ToBeImplementedProperty.Maker(61);
      m.setInherited(false);
      m.setDefault("");
      addPropertyMaker("case-name", m);
      m = new ToBeImplementedProperty.Maker(62);
      m.setInherited(false);
      m.setDefault("");
      addPropertyMaker("case-title", m);
      m = new ToBeImplementedProperty.Maker(85);
      m.setInherited(false);
      m.setDefault("0pt");
      addPropertyMaker("destination-placement-offset", m);
      PropertyMaker m = new StringProperty.Maker(94);
      m.setInherited(false);
      m.setDefault("");
      addPropertyMaker("external-destination", m);
      m = new ToBeImplementedProperty.Maker(123);
      m.setInherited(false);
      m.setDefault("false");
      addPropertyMaker("indicate-destination", m);
      m = new StringProperty.Maker(128);
      m.setInherited(false);
      m.setDefault("");
      addPropertyMaker("internal-destination", m);
      PropertyMaker m = new EnumProperty.Maker(219);
      m.setInherited(false);
      m.addEnum("new", this.getEnumProperty(190, "NEW"));
      m.addEnum("replace", this.getEnumProperty(189, "REPLACE"));
      m.setDefault("replace");
      addPropertyMaker("show-destination", m);
      m = new EnumProperty.Maker(234);
      m.setInherited(false);
      m.addEnum("show", this.getEnumProperty(130, "SHOW"));
      m.addEnum("hide", this.getEnumProperty(58, "HIDE"));
      m.setDefault("show");
      addPropertyMaker("starting-state", m);
      m = new ToBeImplementedProperty.Maker(238);
      m.setInherited(false);
      m.setDefault("xsl-any");
      addPropertyMaker("switch-to", m);
      m = new ToBeImplementedProperty.Maker(242);
      m.setInherited(false);
      m.setDefault("use-target-processing-context");
      addPropertyMaker("target-presentation-context", m);
      m = new ToBeImplementedProperty.Maker(243);
      m.setInherited(false);
      m.setDefault("document-root");
      addPropertyMaker("target-processing-context", m);
      m = new ToBeImplementedProperty.Maker(244);
      m.setInherited(false);
      m.setDefault("use-normal-stylesheet");
      addPropertyMaker("target-stylesheet", m);
   }

   private void createMarkersProperties() {
      PropertyMaker m = new StringProperty.Maker(152);
      m.setInherited(false);
      m.setDefault("");
      addPropertyMaker("marker-class-name", m);
      m = new StringProperty.Maker(207);
      m.setInherited(false);
      m.setDefault("");
      addPropertyMaker("retrieve-class-name", m);
      PropertyMaker m = new EnumProperty.Maker(208);
      m.setInherited(false);
      m.addEnum("first-starting-within-page", this.getEnumProperty(54, "FSWP"));
      m.addEnum("first-including-carryover", this.getEnumProperty(49, "FIC"));
      m.addEnum("last-starting-within-page", this.getEnumProperty(81, "LSWP"));
      m.addEnum("last-ending-within-page", this.getEnumProperty(74, "LEWP"));
      m.setDefault("first-starting-within-page");
      addPropertyMaker("retrieve-position", m);
      m = new EnumProperty.Maker(205);
      m.setInherited(false);
      m.addEnum("page", this.getEnumProperty(104, "PAGE"));
      m.addEnum("page-sequence", this.getEnumProperty(105, "PAGE_SEQUENCE"));
      m.addEnum("document", this.getEnumProperty(34, "DOCUMENT"));
      m.setDefault("page-sequence");
      addPropertyMaker("retrieve-boundary", m);
      m = new EnumProperty.Maker(209);
      m.setInherited(false);
      m.addEnum("first-starting", this.getEnumProperty(191, "FIRST_STARTING"));
      m.addEnum("first-including-carryover", this.getEnumProperty(49, "FIC"));
      m.addEnum("last-starting", this.getEnumProperty(192, "LAST_STARTING"));
      m.addEnum("last-ending", this.getEnumProperty(193, "LAST_ENDING"));
      m.setDefault("first-starting");
      addPropertyMaker("retrieve-position-within-table", m);
      m = new EnumProperty.Maker(206);
      m.setInherited(false);
      m.addEnum("table", this.getEnumProperty(194, "TABLE"));
      m.addEnum("table-fragment", this.getEnumProperty(195, "TABLE_FRAGMENT"));
      m.addEnum("page", this.getEnumProperty(34, "PAGE"));
      m.setDefault("table");
      addPropertyMaker("retrieve-boundary-within-table", m);
   }

   private void createNumberToStringProperties() {
      PropertyMaker m = new StringProperty.Maker(110);
      m.setInherited(false);
      m.setDefault("1");
      addPropertyMaker("format", m);
      PropertyMaker m = new CharacterProperty.Maker(113);
      m.setInherited(false);
      m.setDefault("none");
      addPropertyMaker("grouping-separator", m);
      PropertyMaker m = new NumberProperty.Maker(114);
      m.setInherited(false);
      m.setDefault("0");
      addPropertyMaker("grouping-size", m);
      PropertyMaker m = new EnumProperty.Maker(142);
      m.setInherited(false);
      m.addEnum("alphabetic", this.getEnumProperty(6, "ALPHABETIC"));
      m.addEnum("traditional", this.getEnumProperty(146, "TRADITIONAL"));
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.setDefault("auto");
      addPropertyMaker("letter-value", m);
   }

   private void createPaginationAndLayoutProperties() {
      PropertyMaker m = new EnumProperty.Maker(16);
      m.setInherited(false);
      m.addEnum("blank", this.getEnumProperty(16, "BLANK"));
      m.addEnum("not-blank", this.getEnumProperty(98, "NOT_BLANK"));
      m.addEnum("any", this.getEnumProperty(8, "ANY"));
      m.setDefault("any");
      addPropertyMaker("blank-or-not-blank", m);
      PropertyMaker m = new NumberProperty.PositiveIntegerMaker(74);
      m.setInherited(false);
      m.setDefault("1");
      addPropertyMaker("column-count", m);
      LengthProperty.Maker l = new LengthProperty.Maker(75);
      l.setInherited(false);
      l.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      l.setDefault("0.25in");
      addPropertyMaker("column-gap", l);
      PropertyMaker m = new LengthProperty.Maker(93);
      m.setInherited(true);
      m.setDefault("0pt");
      m.setPercentBase(0);
      addPropertyMaker("extent", m);
      PropertyMaker m = new StringProperty.Maker(98);
      m.setInherited(false);
      m.setDefault("");
      addPropertyMaker("flow-name", m);
      m = new EnumProperty.Maker(109);
      m.setInherited(false);
      m.addEnum("even", this.getEnumProperty(43, "EVEN"));
      m.addEnum("odd", this.getEnumProperty(99, "ODD"));
      m.addEnum("end-on-even", this.getEnumProperty(40, "END_ON_EVEN"));
      m.addEnum("end-on-odd", this.getEnumProperty(41, "END_ON_ODD"));
      m.addEnum("no-force", this.getEnumProperty(88, "NO_FORCE"));
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.setDefault("auto");
      addPropertyMaker("force-page-count", m);
      m = new NumberProperty.PositiveIntegerMaker(126);
      m.setInherited(false);
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.addEnum("auto-odd", this.getEnumProperty(11, "AUTO_ODD"));
      m.addEnum("auto-even", this.getEnumProperty(10, "AUTO_EVEN"));
      m.setDefault("auto");
      addPropertyMaker("initial-page-number", m);
      m = new StringProperty.Maker(153);
      m.setInherited(false);
      m.setDefault("");
      addPropertyMaker("master-name", m);
      m = new StringProperty.Maker(154);
      m.setInherited(false);
      m.setDefault("");
      addPropertyMaker("master-reference", m);
      PropertyMaker m = new NumberProperty.Maker(156);
      m.setInherited(false);
      m.addEnum("no-limit", this.getEnumProperty(89, "NO_LIMIT"));
      m.setDefault("no-limit");
      addPropertyMaker("maximum-repeats", m);
      m = new EnumProperty.Maker(161);
      m.setInherited(false);
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.addEnum("paginate", this.getEnumProperty(106, "PAGINATE"));
      m.addEnum("bounded-in-one-dimension", this.getEnumProperty(21, "BOUNDED_IN_ONE_DIMENSION"));
      m.addEnum("unbounded", this.getEnumProperty(152, "UNBOUNDED"));
      m.setDefault("auto");
      addPropertyMaker("media-usage", m);
      m = new EnumProperty.Maker(167);
      m.setInherited(false);
      m.addEnum("odd", this.getEnumProperty(99, "ODD"));
      m.addEnum("even", this.getEnumProperty(43, "EVEN"));
      m.addEnum("any", this.getEnumProperty(8, "ANY"));
      m.setDefault("any");
      addPropertyMaker("odd-or-even", m);
      LengthProperty.Maker l = new PageDimensionMaker(183);
      l.setInherited(false);
      l.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      l.addEnum("indefinite", this.getEnumProperty(64, "INDEFINITE"));
      l.setDefault("auto");
      addPropertyMaker("page-height", l);
      m = new EnumProperty.Maker(185);
      m.setInherited(false);
      m.addEnum("first", this.getEnumProperty(50, "FIRST"));
      m.addEnum("last", this.getEnumProperty(72, "LAST"));
      m.addEnum("rest", this.getEnumProperty(117, "REST"));
      m.addEnum("any", this.getEnumProperty(8, "ANY"));
      m.addEnum("only", this.getEnumProperty(186, "ONLY"));
      m.setDefault("any");
      addPropertyMaker("page-position", m);
      l = new PageDimensionMaker(186);
      l.setInherited(false);
      l.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      l.addEnum("indefinite", this.getEnumProperty(64, "INDEFINITE"));
      l.setDefault("auto");
      addPropertyMaker("page-width", l);
      m = new EnumProperty.Maker(194);
      m.useGeneric(this.genericBoolean);
      m.setInherited(false);
      m.setDefault("false");
      addPropertyMaker("precedence", m);
      m = new StringProperty.Maker(199);
      m.setInherited(false);
      m.setDefault("");
      addPropertyMaker("region-name", m);
   }

   private void createTableProperties() {
      PropertyMaker m = new TableBorderPrecedence(20);
      m.setInherited(false);
      m.addEnum("force", this.getEnumProperty(53, "FORCE"));
      addPropertyMaker("border-after-precedence", m);
      m = new TableBorderPrecedence(24);
      m.setInherited(false);
      m.addEnum("force", this.getEnumProperty(53, "FORCE"));
      addPropertyMaker("border-before-precedence", m);
      PropertyMaker m = new EnumProperty.Maker(31);
      m.setInherited(true);
      m.setDefault("collapse");
      m.addEnum("separate", this.getEnumProperty(129, "SEPARATE"));
      m.addEnum("collapse-with-precedence", this.getEnumProperty(27, "COLLAPSE_WITH_PRECEDENCE"));
      m.addEnum("collapse", this.getEnumProperty(26, "COLLAPSE"));
      addPropertyMaker("border-collapse", m);
      m = new TableBorderPrecedence(34);
      m.setInherited(false);
      m.addEnum("force", this.getEnumProperty(53, "FORCE"));
      addPropertyMaker("border-end-precedence", m);
      PropertyMaker m = new LengthPairProperty.Maker(45);
      m.setInherited(true);
      m.addShorthand(s_generics[46]);
      PropertyMaker sub = new LengthProperty.Maker(512);
      sub.setDefault("0pt");
      sub.setByShorthand(true);
      m.addSubpropMaker(sub);
      sub = new LengthProperty.Maker(1536);
      sub.setDefault("0pt");
      sub.setByShorthand(true);
      m.addSubpropMaker(sub);
      addPropertyMaker("border-separation", m);
      m = new TableBorderPrecedence(48);
      m.setInherited(false);
      m.addEnum("force", this.getEnumProperty(53, "FORCE"));
      addPropertyMaker("border-start-precedence", m);
      m = new EnumProperty.Maker(60);
      m.setInherited(true);
      m.addEnum("before", this.getEnumProperty(13, "BEFORE"));
      m.addEnum("after", this.getEnumProperty(3, "AFTER"));
      m.addEnum("start", this.getEnumProperty(135, "START"));
      m.addEnum("end", this.getEnumProperty(39, "END"));
      m.addEnum("top", this.getEnumProperty(145, "TOP"));
      m.addEnum("bottom", this.getEnumProperty(20, "BOTTOM"));
      m.addEnum("left", this.getEnumProperty(73, "LEFT"));
      m.addEnum("right", this.getEnumProperty(120, "RIGHT"));
      m.setDefault("before");
      addPropertyMaker("caption-side", m);
      PropertyMaker m = new TableFObj.ColumnNumberPropertyMaker(76);
      m.setInherited(false);
      addPropertyMaker("column-number", m);
      PropertyMaker m = new LengthProperty.Maker(77);
      m.setInherited(false);
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.setDefault("auto");
      m.setPercentBase(5);
      addPropertyMaker("column-width", m);
      m = new EnumProperty.Maker(90);
      m.setInherited(true);
      m.addEnum("show", this.getEnumProperty(130, "SHOW"));
      m.addEnum("hide", this.getEnumProperty(58, "HIDE"));
      m.setDefault("show");
      addPropertyMaker("empty-cells", m);
      m = new EnumProperty.Maker(92);
      m.setInherited(false);
      m.useGeneric(this.genericBoolean);
      m.setDefault("false");
      addPropertyMaker("ends-row", m);
      PropertyMaker m = new NumberProperty.PositiveIntegerMaker(164);
      m.setInherited(false);
      m.setDefault("1");
      addPropertyMaker("number-columns-repeated", m);
      m = new NumberProperty.PositiveIntegerMaker(165);
      m.setInherited(false);
      m.setDefault("1");
      addPropertyMaker("number-columns-spanned", m);
      m = new NumberProperty.PositiveIntegerMaker(166);
      m.setInherited(false);
      m.setDefault("1");
      addPropertyMaker("number-rows-spanned", m);
      m = new EnumProperty.Maker(235);
      m.useGeneric(this.genericBoolean);
      m.setInherited(false);
      m.setDefault("false");
      addPropertyMaker("starts-row", m);
      m = new EnumProperty.Maker(239);
      m.setInherited(false);
      m.setDefault("auto");
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.addEnum("fixed", this.getEnumProperty(51, "FIXED"));
      addPropertyMaker("table-layout", m);
      m = new EnumProperty.Maker(240);
      m.useGeneric(this.genericBoolean);
      m.setInherited(false);
      m.setDefault("false");
      addPropertyMaker("table-omit-footer-at-break", m);
      m = new EnumProperty.Maker(241);
      m.useGeneric(this.genericBoolean);
      m.setInherited(false);
      m.setDefault("false");
      addPropertyMaker("table-omit-header-at-break", m);
   }

   private void createWritingModeProperties() {
      PropertyMaker m = new EnumProperty.Maker(86);
      m.setInherited(true);
      m.addEnum("ltr", this.getEnumProperty(80, "LTR"));
      m.addEnum("rtl", this.getEnumProperty(122, "RTL"));
      m.setDefault("ltr");
      addPropertyMaker("direction", m);
      PropertyMaker m = new ToBeImplementedProperty.Maker(111);
      m.setInherited(true);
      m.setDefault("0deg");
      addPropertyMaker("glyph-orientation-horizontal", m);
      m = new ToBeImplementedProperty.Maker(112);
      m.setInherited(true);
      m.setDefault("auto");
      addPropertyMaker("glyph-orientation-vertical", m);
      PropertyMaker m = new LengthProperty.Maker(247);
      m.setInherited(false);
      m.addEnum("use-font-metrics", this.getEnumProperty(156, "USE_FONT_METRICS"));
      m.setDefault("use-font-metrics");
      m.setPercentBase(1);
      addPropertyMaker("text-altitude", m);
      m = new LengthProperty.Maker(249);
      m.setInherited(false);
      m.addEnum("use-font-metrics", this.getEnumProperty(156, "USE_FONT_METRICS"));
      m.setDefault("use-font-metrics");
      m.setPercentBase(1);
      addPropertyMaker("text-depth", m);
      m = new EnumProperty.Maker(255);
      m.setInherited(false);
      m.addEnum("normal", this.getEnumProperty(97, "NORMAL"));
      m.addEnum("embed", this.getEnumProperty(38, "EMBED"));
      m.addEnum("bidi-override", this.getEnumProperty(15, "BIDI_OVERRIDE"));
      m.setDefault("normal");
      addPropertyMaker("unicode-bidi", m);
      m = new EnumProperty.Maker(267);
      m.setInherited(true);
      m.setDefault("lr-tb");
      m.addEnum("lr-tb", this.getEnumProperty(79, "LR_TB"));
      m.addEnum("rl-tb", this.getEnumProperty(121, "RL_TB"));
      m.addEnum("tb-rl", this.getEnumProperty(140, "TB_RL"));
      m.addKeyword("lr", "lr-tb");
      m.addKeyword("rl", "rl-tb");
      m.addKeyword("tb", "tb-rl");
      addPropertyMaker("writing-mode", m);
   }

   private void createMiscProperties() {
      PropertyMaker m = new StringProperty.Maker(79);
      m.setInherited(false);
      m.setDefault("auto");
      addPropertyMaker("content-type", m);
      m = new StringProperty.Maker(122);
      m.setInherited(false);
      m.setDefault("");
      addPropertyMaker("id", m);
      m = new StringProperty.Maker(274);
      m.setInherited(false);
      m.setDefault("");
      addPropertyMaker("foi:ptr", m);
      m = new StringProperty.Maker(275);
      m.setInherited(false);
      m.setDefault("");
      addPropertyMaker("fox:alt-text", m);
      PropertyMaker m = new LengthProperty.Maker(196);
      m.setInherited(true);
      m.setDefault("6pt");
      m.setPercentBase(5);
      addPropertyMaker("provisional-label-separation", m);
      m = new LengthProperty.Maker(195);
      m.setInherited(true);
      m.setDefault("24pt");
      m.setPercentBase(5);
      addPropertyMaker("provisional-distance-between-starts", m);
      m = new StringProperty.Maker(198);
      m.setInherited(false);
      m.setDefault("");
      addPropertyMaker("ref-id", m);
      PropertyMaker m = new EnumProperty.Maker(217);
      m.useGeneric(this.genericBoolean);
      m.setInherited(true);
      m.setDefault("true");
      addPropertyMaker("score-spaces", m);
      m = new StringProperty.Maker(232);
      m.setInherited(false);
      m.setDefault("");
      addPropertyMaker("src", m);
      m = new EnumProperty.Maker(257);
      m.setInherited(false);
      m.addEnum("visible", this.getEnumProperty(159, "VISIBLE"));
      m.addEnum("hidden", this.getEnumProperty(57, "HIDDEN"));
      m.addEnum("collapse", this.getEnumProperty(26, "COLLAPSE"));
      m.setDefault("visible");
      addPropertyMaker("visibility", m);
      PropertyMaker m = new NumberProperty.Maker(269);
      m.setInherited(false);
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.setDefault("auto");
      addPropertyMaker("z-index", m);
   }

   private void createShorthandProperties() {
      PropertyMaker m = new ToBeImplementedProperty.Maker(7);
      m.setInherited(false);
      m.setDefault("none");
      addPropertyMaker("background", m);
      PropertyMaker m = new BackgroundPositionShorthand.Maker(11);
      m.setInherited(false);
      m.addKeyword("left", "0pt 50%");
      m.addKeyword("left center", "0pt 50%");
      m.addKeyword("center left", "0pt 50%");
      m.addKeyword("right", "100% 50%");
      m.addKeyword("right center", "100% 50%");
      m.addKeyword("center right", "100% 50%");
      m.addKeyword("center", "50% 50%");
      m.addKeyword("center center", "50% 50%");
      m.addKeyword("top", "50% 0pt");
      m.addKeyword("top center", "50% 0pt");
      m.addKeyword("center top", "50% 0pt");
      m.addKeyword("bottom", "50% 100%");
      m.addKeyword("bottom center", "50% 100%");
      m.addKeyword("center bottom", "50% 100%");
      m.addKeyword("top left", "0pt 0pt");
      m.addKeyword("left top", "0pt 0pt");
      m.addKeyword("top right", "100% 0pt");
      m.addKeyword("right top", "100% 0pt");
      m.addKeyword("bottom left", "0pt 100%");
      m.addKeyword("left bottom", "0pt 100%");
      m.addKeyword("bottom right", "100% 100%");
      m.addKeyword("right bottom", "100% 100%");
      m.setDefault("0pt 0pt");
      m.setPercentBase(0);
      m.setDatatypeParser(new BackgroundPositionShorthand.Parser());
      addPropertyMaker("background-position", m);
      PropertyMaker m = new ListProperty.Maker(18);
      m.setInherited(false);
      m.setDefault("");
      m.setDatatypeParser(new GenericShorthandParser());
      addPropertyMaker("border", m);
      m = new ListProperty.Maker(27);
      m.setInherited(false);
      m.setDefault("");
      m.setDatatypeParser(new GenericShorthandParser());
      addPropertyMaker("border-bottom", m);
      m = new ListProperty.Maker(32);
      m.setInherited(false);
      m.setDefault("");
      m.setDatatypeParser(new BoxPropShorthandParser());
      addPropertyMaker("border-color", m);
      m = new ListProperty.Maker(37);
      m.setInherited(false);
      m.setDefault("");
      m.setDatatypeParser(new GenericShorthandParser());
      addPropertyMaker("border-left", m);
      m = new ListProperty.Maker(41);
      m.setInherited(false);
      m.setDefault("");
      m.setDatatypeParser(new GenericShorthandParser());
      addPropertyMaker("border-right", m);
      m = new ListProperty.Maker(51);
      m.setInherited(false);
      m.setDefault("");
      m.setDatatypeParser(new BoxPropShorthandParser());
      addPropertyMaker("border-style", m);
      m = new ListProperty.Maker(46);
      m.setInherited(true);
      m.setDefault("0pt");
      m.setDatatypeParser(new BorderSpacingShorthandParser());
      addPropertyMaker("border-spacing", m);
      m = new ListProperty.Maker(52);
      m.setInherited(false);
      m.setDefault("");
      m.setDatatypeParser(new GenericShorthandParser());
      addPropertyMaker("border-top", m);
      m = new ListProperty.Maker(56);
      m.setInherited(false);
      m.setDefault("");
      m.setDatatypeParser(new BoxPropShorthandParser());
      addPropertyMaker("border-width", m);
      m = new ToBeImplementedProperty.Maker(82);
      m.setInherited(false);
      m.setDefault("");
      addPropertyMaker("cue", m);
      PropertyMaker m = new FontShorthandProperty.Maker(100);
      m.setInherited(true);
      m.addEnum("caption", this.getEnumProperty(180, "CAPTION"));
      m.addEnum("icon", this.getEnumProperty(181, "ICON"));
      m.addEnum("message-box", this.getEnumProperty(183, "MESSAGE_BOX"));
      m.addEnum("menu", this.getEnumProperty(182, "MENU"));
      m.addEnum("small-caption", this.getEnumProperty(184, "SMALL_CAPTION"));
      m.addEnum("status-bar", this.getEnumProperty(185, "STATUS_BAR"));
      m.setDefault("");
      m.setDatatypeParser(new FontShorthandParser());
      addPropertyMaker("font", m);
      m = new ListProperty.Maker(147);
      m.setInherited(false);
      m.setDefault("");
      m.setDatatypeParser(new BoxPropShorthandParser());
      m.setPercentBase(5);
      addPropertyMaker("margin", m);
      m = new ListProperty.Maker(170);
      m.setInherited(false);
      m.setDatatypeParser(new BoxPropShorthandParser());
      m.setPercentBase(5);
      addPropertyMaker("padding", m);
      PropertyMaker m = new EnumProperty.Maker(179);
      m.setInherited(false);
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.addEnum("always", this.getEnumProperty(7, "ALWAYS"));
      m.addEnum("avoid", this.getEnumProperty(178, "AVOID"));
      m.addEnum("left", this.getEnumProperty(73, "LEFT"));
      m.addEnum("right", this.getEnumProperty(120, "RIGHT"));
      m.setDefault("auto");
      m.setDatatypeParser(new PageBreakShorthandParser());
      addPropertyMaker("page-break-after", m);
      m = new EnumProperty.Maker(180);
      m.setInherited(false);
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.addEnum("always", this.getEnumProperty(7, "ALWAYS"));
      m.addEnum("avoid", this.getEnumProperty(178, "AVOID"));
      m.addEnum("left", this.getEnumProperty(73, "LEFT"));
      m.addEnum("right", this.getEnumProperty(120, "RIGHT"));
      m.setDefault("auto");
      m.setDatatypeParser(new PageBreakShorthandParser());
      addPropertyMaker("page-break-before", m);
      m = new EnumProperty.Maker(181);
      m.setInherited(true);
      m.addEnum("auto", this.getEnumProperty(9, "AUTO"));
      m.addEnum("avoid", this.getEnumProperty(178, "AVOID"));
      m.setDefault("auto");
      m.setDatatypeParser(new PageBreakShorthandParser());
      addPropertyMaker("page-break-inside", m);
      m = new ToBeImplementedProperty.Maker(187);
      m.setInherited(false);
      m.setDefault("");
      addPropertyMaker("pause", m);
      m = new EnumProperty.Maker(193);
      m.setInherited(false);
      m.addEnum("static", this.getEnumProperty(136, "STATIC"));
      m.addEnum("relative", this.getEnumProperty(110, "RELATIVE"));
      m.addEnum("absolute", this.getEnumProperty(1, "ABSOLUTE"));
      m.addEnum("fixed", this.getEnumProperty(51, "FIXED"));
      m.setDefault("static");
      m.setDatatypeParser(new PositionShorthandParser());
      addPropertyMaker("position", m);
      m = new ToBeImplementedProperty.Maker(220);
      m.setInherited(false);
      m.setDefault("auto");
      addPropertyMaker("size", m);
      PropertyMaker m = new LengthProperty.Maker(256);
      m.setInherited(false);
      m.addEnum("baseline", this.getEnumProperty(12, "BASELINE"));
      m.addEnum("middle", this.getEnumProperty(84, "MIDDLE"));
      m.addEnum("sub", this.getEnumProperty(137, "SUB"));
      m.addEnum("super", this.getEnumProperty(138, "SUPER"));
      m.addEnum("text-top", this.getEnumProperty(144, "TEXT_TOP"));
      m.addEnum("text-bottom", this.getEnumProperty(143, "TEXT_BOTTOM"));
      m.addEnum("top", this.getEnumProperty(145, "TOP"));
      m.addEnum("bottom", this.getEnumProperty(20, "BOTTOM"));
      m.setDatatypeParser(new VerticalAlignShorthandParser());
      m.setDefault("baseline");
      m.setPercentBase(12);
      addPropertyMaker("vertical-align", m);
      m = new EnumProperty.Maker(260);
      m.setInherited(true);
      m.addEnum("normal", this.getEnumProperty(97, "NORMAL"));
      m.addEnum("pre", this.getEnumProperty(179, "PRE"));
      m.addEnum("nowrap", this.getEnumProperty(93, "NO_WRAP"));
      m.setDefault("normal");
      m.setDatatypeParser(new WhiteSpaceShorthandParser());
      addPropertyMaker("white-space", m);
      PropertyMaker m = new StringProperty.Maker(268);
      m.setInherited(true);
      m.setDefault("");
      m.setDatatypeParser(new XMLLangShorthandParser());
      addPropertyMaker("xml:lang", m);
   }
}
